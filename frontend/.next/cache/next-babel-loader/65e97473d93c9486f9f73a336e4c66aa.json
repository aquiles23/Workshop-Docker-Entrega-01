{"ast":null,"code":"var _jsxFileName = \"/frontend/components/comment/CommentList.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport useSWR from \"swr\";\nimport Comment from \"components/comment/Comment\";\nimport CommentInput from \"components/comment/CommentInput\";\nimport ErrorMessage from \"components/common/ErrorMessage\";\nimport LoadingSpinner from \"components/common/LoadingSpinner\";\nimport { SERVER_BASE_URL } from \"lib/utils/constant\";\nimport fetcher from \"lib/utils/fetcher\";\n\nconst CommentList = ({\n  pid\n}) => {\n  const {\n    data,\n    error\n  } = useSWR(`${SERVER_BASE_URL}/articles/${pid}/comments`, fetcher);\n  if (error) return __jsx(ErrorMessage, {\n    message: \"Cannot load comments...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 21\n    }\n  });\n  if (!data) return __jsx(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 21\n    }\n  });\n  const {\n    comments\n  } = data;\n  return __jsx(React.Fragment, null, __jsx(CommentInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }), comments === null || comments === void 0 ? void 0 : comments.map(comment => __jsx(Comment, {\n    key: comment.id,\n    comment: comment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default CommentList;","map":{"version":3,"sources":["/frontend/components/comment/CommentList.tsx"],"names":["React","useSWR","Comment","CommentInput","ErrorMessage","LoadingSpinner","SERVER_BASE_URL","fetcher","CommentList","pid","data","error","comments","map","comment","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AAEA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AAEA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAC/B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBV,MAAM,CAC3B,GAAEK,eAAgB,aAAYG,GAAI,WADP,EAE5BF,OAF4B,CAA9B;AAKA,MAAII,KAAJ,EAAW,OAAO,MAAC,YAAD;AAAc,IAAA,OAAO,EAAC,yBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,MAAI,CAACD,IAAL,EAAW,OAAO,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEX,QAAM;AAAEE,IAAAA;AAAF,MAAeF,IAArB;AAEA,SACE,4BACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGE,QAFH,aAEGA,QAFH,uBAEGA,QAAQ,CAAEC,GAAV,CAAeC,OAAD,IACb,MAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,OAAO,CAACC,EAAtB;AAA0B,IAAA,OAAO,EAAED,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAFH,CADF;AAQD,CAnBD;;AAqBA,eAAeN,WAAf","sourcesContent":["import React from \"react\";\nimport useSWR from \"swr\";\n\nimport Comment from \"components/comment/Comment\";\nimport CommentInput from \"components/comment/CommentInput\";\nimport ErrorMessage from \"components/common/ErrorMessage\";\nimport LoadingSpinner from \"components/common/LoadingSpinner\";\nimport { CommentType } from \"lib/types/commentType\";\nimport { SERVER_BASE_URL } from \"lib/utils/constant\";\nimport fetcher from \"lib/utils/fetcher\";\n\nconst CommentList = ({ pid }) => {\n  const { data, error } = useSWR(\n    `${SERVER_BASE_URL}/articles/${pid}/comments`,\n    fetcher\n  );\n\n  if (error) return <ErrorMessage message=\"Cannot load comments...\" />;\n  if (!data) return <LoadingSpinner />;\n\n  const { comments } = data;\n\n  return (\n    <>\n      <CommentInput />\n      {comments?.map((comment: CommentType) => (\n        <Comment key={comment.id} comment={comment} />\n      ))}\n    </>\n  );\n};\n\nexport default CommentList;\n"]},"metadata":{},"sourceType":"module"}