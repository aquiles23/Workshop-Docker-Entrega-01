{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst editorReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_TITLE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        title: action.text\n      });\n\n    case \"SET_DESCRIPTION\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        description: action.text\n      });\n\n    case \"SET_BODY\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        body: action.text\n      });\n\n    case \"ADD_TAG\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tagList: state.tagList.concat(action.tag)\n      });\n\n    case \"REMOVE_TAG\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tagList: state.tagList.filter(tag => tag !== action.tag)\n      });\n\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n};\n\nexport default editorReducer;","map":{"version":3,"sources":["/frontend/lib/utils/editorReducer.ts"],"names":["editorReducer","state","action","type","title","text","description","body","tagList","concat","tag","filter","Error"],"mappings":";;;;;;AAAA,MAAMA,aAAa,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,6CACKF,KADL;AAEEG,QAAAA,KAAK,EAAEF,MAAM,CAACG;AAFhB;;AAIF,SAAK,iBAAL;AACE,6CACKJ,KADL;AAEEK,QAAAA,WAAW,EAAEJ,MAAM,CAACG;AAFtB;;AAIF,SAAK,UAAL;AACE,6CACKJ,KADL;AAEEM,QAAAA,IAAI,EAAEL,MAAM,CAACG;AAFf;;AAIF,SAAK,SAAL;AACE,6CACKJ,KADL;AAEEO,QAAAA,OAAO,EAAEP,KAAK,CAACO,OAAN,CAAcC,MAAd,CAAqBP,MAAM,CAACQ,GAA5B;AAFX;;AAIF,SAAK,YAAL;AACE,6CACKT,KADL;AAEEO,QAAAA,OAAO,EAAEP,KAAK,CAACO,OAAN,CAAcG,MAAd,CAAqBD,GAAG,IAAIA,GAAG,KAAKR,MAAM,CAACQ,GAA3C;AAFX;;AAIF;AACE,YAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AA3BJ;AA6BD,CA9BD;;AAgCA,eAAeZ,aAAf","sourcesContent":["const editorReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_TITLE\":\n      return {\n        ...state,\n        title: action.text\n      };\n    case \"SET_DESCRIPTION\":\n      return {\n        ...state,\n        description: action.text\n      };\n    case \"SET_BODY\":\n      return {\n        ...state,\n        body: action.text\n      };\n    case \"ADD_TAG\":\n      return {\n        ...state,\n        tagList: state.tagList.concat(action.tag)\n      };\n    case \"REMOVE_TAG\":\n      return {\n        ...state,\n        tagList: state.tagList.filter(tag => tag !== action.tag)\n      };\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n};\n\nexport default editorReducer;\n"]},"metadata":{},"sourceType":"module"}