{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nexport var getRange = function getRange(start, end) {\n  return _toConsumableArray(Array(end - start + 1)).map(function (_, i) {\n    return start + i;\n  });\n};\nexport var getPageInfo = function getPageInfo(_ref) {\n  var limit = _ref.limit,\n      pageCount = _ref.pageCount,\n      total = _ref.total,\n      page = _ref.page;\n  var totalPages = Math.floor(total / limit);\n  var currentPage = page;\n\n  if (currentPage > totalPages) {\n    currentPage = totalPages;\n  }\n\n  var firstPage = Math.max(0, currentPage - Math.floor(pageCount / 2));\n  var lastPage = Math.min(totalPages, currentPage + Math.floor(pageCount / 2));\n\n  if (lastPage - firstPage + 1 < pageCount) {\n    if (currentPage < totalPages / 2) {\n      lastPage = Math.min(totalPages, lastPage + (pageCount - (lastPage - firstPage)));\n    } else {\n      firstPage = Math.max(1, firstPage - (pageCount - (lastPage - firstPage)));\n    }\n  }\n\n  if (lastPage - firstPage + 1 > pageCount) {\n    if (currentPage > totalPages / 2) {\n      firstPage = firstPage + 1;\n    } else {\n      lastPage = lastPage - 1;\n    }\n  }\n\n  var previousPage = currentPage - 1;\n  var nextPage = currentPage + 1;\n  var hasPreviousPage = currentPage > 0;\n  var hasNextPage = currentPage < totalPages;\n  return {\n    firstPage: firstPage,\n    lastPage: lastPage,\n    previousPage: previousPage,\n    nextPage: nextPage,\n    hasPreviousPage: hasPreviousPage,\n    hasNextPage: hasNextPage,\n    totalPages: totalPages\n  };\n};","map":{"version":3,"sources":["/frontend/lib/utils/calculatePagination.ts"],"names":["getRange","start","end","Array","map","_","i","getPageInfo","limit","pageCount","total","page","totalPages","Math","floor","currentPage","firstPage","max","lastPage","min","previousPage","nextPage","hasPreviousPage","hasNextPage"],"mappings":";AAAA,OAAO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,GAAR,EAAgB;AACtC,SAAO,mBAAIC,KAAK,CAACD,GAAG,GAAGD,KAAN,GAAc,CAAf,CAAT,EAA4BG,GAA5B,CAAgC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUL,KAAK,GAAGK,CAAlB;AAAA,GAAhC,CAAP;AACD,CAFM;AAIP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAuC;AAAA,MAApCC,KAAoC,QAApCA,KAAoC;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAChE,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,GAAGF,KAAnB,CAAnB;AAEA,MAAIO,WAAW,GAAGJ,IAAlB;;AAEA,MAAII,WAAW,GAAGH,UAAlB,EAA8B;AAC5BG,IAAAA,WAAW,GAAGH,UAAd;AACD;;AAED,MAAII,SAAS,GAAGH,IAAI,CAACI,GAAL,CAAS,CAAT,EAAYF,WAAW,GAAGF,IAAI,CAACC,KAAL,CAAWL,SAAS,GAAG,CAAvB,CAA1B,CAAhB;AACA,MAAIS,QAAQ,GAAGL,IAAI,CAACM,GAAL,CAASP,UAAT,EAAqBG,WAAW,GAAGF,IAAI,CAACC,KAAL,CAAWL,SAAS,GAAG,CAAvB,CAAnC,CAAf;;AAEA,MAAIS,QAAQ,GAAGF,SAAX,GAAuB,CAAvB,GAA2BP,SAA/B,EAA0C;AACxC,QAAIM,WAAW,GAAGH,UAAU,GAAG,CAA/B,EAAkC;AAChCM,MAAAA,QAAQ,GAAGL,IAAI,CAACM,GAAL,CACTP,UADS,EAETM,QAAQ,IAAIT,SAAS,IAAIS,QAAQ,GAAGF,SAAf,CAAb,CAFC,CAAX;AAID,KALD,MAKO;AACLA,MAAAA,SAAS,GAAGH,IAAI,CAACI,GAAL,CAAS,CAAT,EAAYD,SAAS,IAAIP,SAAS,IAAIS,QAAQ,GAAGF,SAAf,CAAb,CAArB,CAAZ;AACD;AACF;;AAED,MAAIE,QAAQ,GAAGF,SAAX,GAAuB,CAAvB,GAA2BP,SAA/B,EAA0C;AACxC,QAAIM,WAAW,GAAGH,UAAU,GAAG,CAA/B,EAAkC;AAChCI,MAAAA,SAAS,GAAGA,SAAS,GAAG,CAAxB;AACD,KAFD,MAEO;AACLE,MAAAA,QAAQ,GAAGA,QAAQ,GAAG,CAAtB;AACD;AACF;;AAED,MAAME,YAAY,GAAGL,WAAW,GAAG,CAAnC;AACA,MAAMM,QAAQ,GAAGN,WAAW,GAAG,CAA/B;AACA,MAAMO,eAAe,GAAGP,WAAW,GAAG,CAAtC;AACA,MAAMQ,WAAW,GAAGR,WAAW,GAAGH,UAAlC;AAEA,SAAO;AACLI,IAAAA,SAAS,EAATA,SADK;AAELE,IAAAA,QAAQ,EAARA,QAFK;AAGLE,IAAAA,YAAY,EAAZA,YAHK;AAILC,IAAAA,QAAQ,EAARA,QAJK;AAKLC,IAAAA,eAAe,EAAfA,eALK;AAMLC,IAAAA,WAAW,EAAXA,WANK;AAOLX,IAAAA,UAAU,EAAVA;AAPK,GAAP;AASD,CA7CM","sourcesContent":["export const getRange = (start, end) => {\n  return [...Array(end - start + 1)].map((_, i) => start + i);\n};\n\nexport const getPageInfo = ({ limit, pageCount, total, page }) => {\n  const totalPages = Math.floor(total / limit);\n\n  let currentPage = page;\n\n  if (currentPage > totalPages) {\n    currentPage = totalPages;\n  }\n\n  let firstPage = Math.max(0, currentPage - Math.floor(pageCount / 2));\n  let lastPage = Math.min(totalPages, currentPage + Math.floor(pageCount / 2));\n\n  if (lastPage - firstPage + 1 < pageCount) {\n    if (currentPage < totalPages / 2) {\n      lastPage = Math.min(\n        totalPages,\n        lastPage + (pageCount - (lastPage - firstPage))\n      );\n    } else {\n      firstPage = Math.max(1, firstPage - (pageCount - (lastPage - firstPage)));\n    }\n  }\n\n  if (lastPage - firstPage + 1 > pageCount) {\n    if (currentPage > totalPages / 2) {\n      firstPage = firstPage + 1;\n    } else {\n      lastPage = lastPage - 1;\n    }\n  }\n\n  const previousPage = currentPage - 1;\n  const nextPage = currentPage + 1;\n  const hasPreviousPage = currentPage > 0;\n  const hasNextPage = currentPage < totalPages;\n\n  return {\n    firstPage,\n    lastPage,\n    previousPage,\n    nextPage,\n    hasPreviousPage,\n    hasNextPage,\n    totalPages,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}